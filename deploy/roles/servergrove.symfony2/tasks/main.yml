---
# tasks file for symfony2
- set_fact: symfony2_project_release={{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}
  when: symfony2_project_release == None

- name: Create/prepare directories for release and shared data.
  file: state=directory path={{item.path}}
  with_items:
    - { path: "{{symfony2_project_root}}/releases/{{symfony2_project_release}}" }
    - { path: "{{symfony2_project_root}}/shared" }
    - { path: "{{symfony2_project_root}}/shared/app/config" }
    - { path: "{{symfony2_project_root}}/shared/app/logs" }

- name: Pull sources from the repository.
  git: repo={{symfony2_project_repo}} dest={{symfony2_project_root}}/releases/{{symfony2_project_release}} version={{symfony2_project_branch}} accept_hostkey=yes

- name: Clean out versioning.
  file: state=absent path={{symfony2_project_root}}/releases/{{symfony2_project_release}}/.git
  when: symfony2_project_clean_versioning == true

# will be replaced with symlink
- name: Ensure logs directory is not present.
  file: state=absent path={{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/logs

- name: Create symlinks to shared directories.
  file: state=link src={{item.src}} path={{item.path}}
  with_items:
    - { src: "{{symfony2_project_root}}/shared/app/logs", path: "{{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/logs" }
    - { src: "{{symfony2_project_root}}/shared/web/uploads", path: "{{symfony2_project_root}}/releases/{{symfony2_project_release}}/web/uploads" }

- name: Check if config dir exists.
  stat: path={{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/config
  register: config_dir

- name: Link configs dir if not yet exists.
  file: state=link src={{symfony2_project_root}}/shared/app/config path={{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/config
  when: config_dir.stat.exists == false

- name: Check if shared/app/config/parameters.yml exists.
  stat: path={{symfony2_project_root}}/shared/app/config/parameters.yml
  register: parameters_yml

- name: Create symlink for app/config/parameters.yml from shared directory.
  shell: ln -s {{symfony2_project_root}}/shared/app/config/parameters.yml {{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/config/parameters.yml creates={{symfony2_project_root}}/releases/{{symfony2_project_release}}/app/config/parameters.yml
  when: parameters_yml.stat.exists

- name: Check if composer exists.
  stat: path={{symfony2_project_composer_path}}/composer.phar
  register: composer_file

- name: Install composer.
  get_url: url=https://getcomposer.org/composer.phar dest={{symfony2_project_composer_path}} mode=0755 validate_certs=no
  when: composer_file.stat.exists == false

- name: Update composer if already exists.
  shell: "{{symfony2_project_composer_path}}/composer.phar selfupdate"
  when: composer_file.stat.exists == true

- name: Run composer install.
  shell: cd {{symfony2_project_root}}/releases/{{symfony2_project_release}} && export SYMFONY_ENV={{symfony2_project_env}} && {{symfony2_project_php_path}} {{symfony2_project_composer_path}}/composer.phar install {{symfony2_project_composer_opts}}

- name: Check if bower exists
  stat: path=/usr/local/bin/bower
  register: bower_file

- name: Run bower
  bower: path={{symfony2_project_root}}/releases/{{symfony2_project_release}} state=latest
  when: bower_file.stat.exists == true

- name: Check if Compass exists
  stat: path=/usr/local/bin/compass
  register: compass_file

- name: Compiling CSS
  command: compass compile --force chdir={{symfony2_project_root}}/releases/{{symfony2_project_release}}
  when: compass_file.stat.exists == true

- name: Dump assets.
  shell: cd {{symfony2_project_root}}/releases/{{symfony2_project_release}} && {{symfony2_project_php_path}} app/console assetic:dump --env={{symfony2_project_env}} {{symfony2_project_console_opts}}
  when: compass_file.stat.exists == true and bower_file.stat.exists == true

- name: Create symlink.
  file: state=link src={{symfony2_project_root}}/releases/{{symfony2_project_release}} path={{symfony2_project_root}}/current

- name: Cleanup releases.
  shell: cd {{symfony2_project_root}}/releases && ls -t1 | tail -n +$(({{symfony2_project_keep_releases}}+1)) | xargs -n1 rm -rf
  sudo: yes
